# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    name: _str
    holdingEvents: 'EventsCreateManyNestedWithoutRelationsInput'
    participatingEvents: 'ParticipantsCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    name: _str


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    email: _str
    password: _str
    holdingEvents: 'EventsUpdateManyWithoutRelationsInput'
    participatingEvents: 'ParticipantsUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    email: _str
    password: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromUser']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromUserRecursive1']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromUserRecursive2']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromUserRecursive3']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromUserRecursive4']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class EventsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    holder: Union[bool, 'UserArgsFromUserRecursive1']
    schedules: Union[bool, 'FindManySchedulesArgsFromUserRecursive1']


class EventsIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    holder: Union[bool, 'UserArgsFromUserRecursive2']
    schedules: Union[bool, 'FindManySchedulesArgsFromUserRecursive2']


class EventsIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    holder: Union[bool, 'UserArgsFromUserRecursive3']
    schedules: Union[bool, 'FindManySchedulesArgsFromUserRecursive3']


class EventsIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    holder: Union[bool, 'UserArgsFromUserRecursive4']
    schedules: Union[bool, 'FindManySchedulesArgsFromUserRecursive4']


class EventsIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class EventsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyEventsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class SchedulesIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    event: Union[bool, 'EventsArgsFromUserRecursive1']
    participants: Union[bool, 'FindManyParticipantsArgsFromUserRecursive1']


class SchedulesIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    event: Union[bool, 'EventsArgsFromUserRecursive2']
    participants: Union[bool, 'FindManyParticipantsArgsFromUserRecursive2']


class SchedulesIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    event: Union[bool, 'EventsArgsFromUserRecursive3']
    participants: Union[bool, 'FindManyParticipantsArgsFromUserRecursive3']


class SchedulesIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    event: Union[bool, 'EventsArgsFromUserRecursive4']
    participants: Union[bool, 'FindManyParticipantsArgsFromUserRecursive4']


class SchedulesIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SchedulesArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SchedulesIncludeFromSchedulesRecursive1'


class SchedulesArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SchedulesIncludeFromSchedulesRecursive2'


class SchedulesArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SchedulesIncludeFromSchedulesRecursive3'


class SchedulesArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SchedulesIncludeFromSchedulesRecursive4'


class SchedulesArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySchedulesArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive1'


class FindManySchedulesArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive2'


class FindManySchedulesArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive3'


class FindManySchedulesArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive4'


class FindManySchedulesArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    
    

class ParticipantsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    schedule: Union[bool, 'SchedulesArgsFromUserRecursive1']


class ParticipantsIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    schedule: Union[bool, 'SchedulesArgsFromUserRecursive2']


class ParticipantsIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    schedule: Union[bool, 'SchedulesArgsFromUserRecursive3']


class ParticipantsIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    schedule: Union[bool, 'SchedulesArgsFromUserRecursive4']


class ParticipantsIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ParticipantsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ParticipantsIncludeFromParticipantsRecursive1'


class ParticipantsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ParticipantsIncludeFromParticipantsRecursive2'


class ParticipantsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ParticipantsIncludeFromParticipantsRecursive3'


class ParticipantsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ParticipantsIncludeFromParticipantsRecursive4'


class ParticipantsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyParticipantsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive1'


class FindManyParticipantsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive2'


class FindManyParticipantsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive3'


class FindManyParticipantsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive4'


class FindManyParticipantsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    holdingEvents: 'EventsListRelationFilter'
    participatingEvents: 'ParticipantsListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    holdingEvents: 'EventsListRelationFilter'
    participatingEvents: 'ParticipantsListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    holdingEvents: 'EventsListRelationFilter'
    participatingEvents: 'ParticipantsListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    holdingEvents: 'EventsListRelationFilter'
    participatingEvents: 'ParticipantsListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    holdingEvents: 'EventsListRelationFilter'
    participatingEvents: 'ParticipantsListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    email: _str
    password: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    name: _str
    email: _str
    password: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    password: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    password: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'password': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'password': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'email',
    'password',
    'holdingEvents',
    'participatingEvents',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'password',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'holdingEvents',
        'participatingEvents',
    ]

# Events types

class EventsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Events create method"""
    id: _int
    title: _str
    description: Optional[_str]
    holder: 'UserCreateNestedWithoutRelationsInput'
    holderId: _int
    createdAt: datetime.datetime
    schedules: 'SchedulesCreateManyNestedWithoutRelationsInput'


class EventsCreateInput(EventsOptionalCreateInput):
    """Required arguments to the Events create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EventsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Events create method, without relations"""
    id: _int
    title: _str
    description: Optional[_str]
    holderId: _int
    createdAt: datetime.datetime


class EventsCreateWithoutRelationsInput(EventsOptionalCreateWithoutRelationsInput):
    """Required arguments to the Events create method, without relations"""


class EventsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EventsCreateWithoutRelationsInput'
    connect: 'EventsWhereUniqueInput'


class EventsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EventsCreateWithoutRelationsInput', List['EventsCreateWithoutRelationsInput']]
    connect: Union['EventsWhereUniqueInput', List['EventsWhereUniqueInput']]


_EventsWhereUnique_id_Input = TypedDict(
    '_EventsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

EventsWhereUniqueInput = _EventsWhereUnique_id_Input


class EventsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    title: _str
    description: Optional[_str]
    holder: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    schedules: 'SchedulesUpdateManyWithoutRelationsInput'


class EventsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    title: _str
    description: Optional[_str]
    createdAt: datetime.datetime


class EventsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EventsCreateWithoutRelationsInput']
    connect: List['EventsWhereUniqueInput']
    set: List['EventsWhereUniqueInput']
    disconnect: List['EventsWhereUniqueInput']
    delete: List['EventsWhereUniqueInput']

    # TODO
    # update: List['EventsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EventsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EventsScalarWhereInput']
    # upsert: List['EventsUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['EventsCreateOrConnectWithoutRelationsInput']


class EventsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EventsCreateWithoutRelationsInput'
    connect: 'EventsWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EventsUpdateInput'
    # upsert: 'EventsUpsertWithoutRelationsInput'
    # connectOrCreate: 'EventsCreateOrConnectWithoutRelationsInput'


class EventsUpsertInput(TypedDict):
    create: 'EventsCreateInput'
    update: 'EventsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Events_id_OrderByInput = TypedDict(
    '_Events_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Events_title_OrderByInput = TypedDict(
    '_Events_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Events_description_OrderByInput = TypedDict(
    '_Events_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Events_holderId_OrderByInput = TypedDict(
    '_Events_holderId_OrderByInput',
    {
        'holderId': 'SortOrder',
    },
    total=True
)

_Events_createdAt_OrderByInput = TypedDict(
    '_Events_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

EventsOrderByInput = Union[
    '_Events_id_OrderByInput',
    '_Events_title_OrderByInput',
    '_Events_description_OrderByInput',
    '_Events_holderId_OrderByInput',
    '_Events_createdAt_OrderByInput',
]



# recursive Events types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EventsRelationFilter = TypedDict(
    'EventsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EventsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EventsInclude(TypedDict, total=False):
    """Events relational arguments"""
    holder: Union[bool, 'UserArgsFromEvents']
    schedules: Union[bool, 'FindManySchedulesArgsFromEvents']


    

class UserIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromEventsRecursive1']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromEventsRecursive1']


class UserIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromEventsRecursive2']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromEventsRecursive2']


class UserIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromEventsRecursive3']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromEventsRecursive3']


class UserIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromEventsRecursive4']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromEventsRecursive4']


class UserIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class UserArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyUserArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class EventsIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    holder: Union[bool, 'UserArgsFromEventsRecursive1']
    schedules: Union[bool, 'FindManySchedulesArgsFromEventsRecursive1']


class EventsIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    holder: Union[bool, 'UserArgsFromEventsRecursive2']
    schedules: Union[bool, 'FindManySchedulesArgsFromEventsRecursive2']


class EventsIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    holder: Union[bool, 'UserArgsFromEventsRecursive3']
    schedules: Union[bool, 'FindManySchedulesArgsFromEventsRecursive3']


class EventsIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    holder: Union[bool, 'UserArgsFromEventsRecursive4']
    schedules: Union[bool, 'FindManySchedulesArgsFromEventsRecursive4']


class EventsIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class EventsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyEventsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class SchedulesIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    event: Union[bool, 'EventsArgsFromEventsRecursive1']
    participants: Union[bool, 'FindManyParticipantsArgsFromEventsRecursive1']


class SchedulesIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    event: Union[bool, 'EventsArgsFromEventsRecursive2']
    participants: Union[bool, 'FindManyParticipantsArgsFromEventsRecursive2']


class SchedulesIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    event: Union[bool, 'EventsArgsFromEventsRecursive3']
    participants: Union[bool, 'FindManyParticipantsArgsFromEventsRecursive3']


class SchedulesIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    event: Union[bool, 'EventsArgsFromEventsRecursive4']
    participants: Union[bool, 'FindManyParticipantsArgsFromEventsRecursive4']


class SchedulesIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class SchedulesArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'SchedulesIncludeFromSchedulesRecursive1'


class SchedulesArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'SchedulesIncludeFromSchedulesRecursive2'


class SchedulesArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'SchedulesIncludeFromSchedulesRecursive3'


class SchedulesArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'SchedulesIncludeFromSchedulesRecursive4'


class SchedulesArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManySchedulesArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive1'


class FindManySchedulesArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive2'


class FindManySchedulesArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive3'


class FindManySchedulesArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive4'


class FindManySchedulesArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    
    

class ParticipantsIncludeFromEvents(TypedDict, total=False):
    """Relational arguments for Events"""
    user: Union[bool, 'UserArgsFromEventsRecursive1']
    schedule: Union[bool, 'SchedulesArgsFromEventsRecursive1']


class ParticipantsIncludeFromEventsRecursive1(TypedDict, total=False):
    """Relational arguments for Events"""
    user: Union[bool, 'UserArgsFromEventsRecursive2']
    schedule: Union[bool, 'SchedulesArgsFromEventsRecursive2']


class ParticipantsIncludeFromEventsRecursive2(TypedDict, total=False):
    """Relational arguments for Events"""
    user: Union[bool, 'UserArgsFromEventsRecursive3']
    schedule: Union[bool, 'SchedulesArgsFromEventsRecursive3']


class ParticipantsIncludeFromEventsRecursive3(TypedDict, total=False):
    """Relational arguments for Events"""
    user: Union[bool, 'UserArgsFromEventsRecursive4']
    schedule: Union[bool, 'SchedulesArgsFromEventsRecursive4']


class ParticipantsIncludeFromEventsRecursive4(TypedDict, total=False):
    """Relational arguments for Events"""

    

class ParticipantsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ParticipantsIncludeFromParticipantsRecursive1'


class ParticipantsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ParticipantsIncludeFromParticipantsRecursive2'


class ParticipantsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ParticipantsIncludeFromParticipantsRecursive3'


class ParticipantsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    include: 'ParticipantsIncludeFromParticipantsRecursive4'


class ParticipantsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    
    

class FindManyParticipantsArgsFromEvents(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive1'


class FindManyParticipantsArgsFromEventsRecursive1(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive2'


class FindManyParticipantsArgsFromEventsRecursive2(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive3'


class FindManyParticipantsArgsFromEventsRecursive3(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive4'


class FindManyParticipantsArgsFromEventsRecursive4(TypedDict, total=False):
    """Arguments for Events"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    


FindManyEventsArgs = FindManyEventsArgsFromEvents
FindFirstEventsArgs = FindManyEventsArgsFromEvents


    

class EventsWhereInput(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    holder: 'UserRelationFilter'
    holderId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    schedules: 'SchedulesListRelationFilter'

    # should be noted that AND and NOT should be Union['EventsWhereInputRecursive1', List['EventsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EventsWhereInputRecursive1']
    OR: List['EventsWhereInputRecursive1']
    NOT: List['EventsWhereInputRecursive1']


class EventsWhereInputRecursive1(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    holder: 'UserRelationFilter'
    holderId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    schedules: 'SchedulesListRelationFilter'

    # should be noted that AND and NOT should be Union['EventsWhereInputRecursive2', List['EventsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EventsWhereInputRecursive2']
    OR: List['EventsWhereInputRecursive2']
    NOT: List['EventsWhereInputRecursive2']


class EventsWhereInputRecursive2(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    holder: 'UserRelationFilter'
    holderId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    schedules: 'SchedulesListRelationFilter'

    # should be noted that AND and NOT should be Union['EventsWhereInputRecursive3', List['EventsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EventsWhereInputRecursive3']
    OR: List['EventsWhereInputRecursive3']
    NOT: List['EventsWhereInputRecursive3']


class EventsWhereInputRecursive3(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    holder: 'UserRelationFilter'
    holderId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    schedules: 'SchedulesListRelationFilter'

    # should be noted that AND and NOT should be Union['EventsWhereInputRecursive4', List['EventsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EventsWhereInputRecursive4']
    OR: List['EventsWhereInputRecursive4']
    NOT: List['EventsWhereInputRecursive4']


class EventsWhereInputRecursive4(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    holder: 'UserRelationFilter'
    holderId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    schedules: 'SchedulesListRelationFilter'



# aggregate Events types


    

class EventsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    holderId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventsScalarWhereWithAggregatesInputRecursive1']
    OR: List['EventsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EventsScalarWhereWithAggregatesInputRecursive1']


class EventsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    holderId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventsScalarWhereWithAggregatesInputRecursive2']
    OR: List['EventsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EventsScalarWhereWithAggregatesInputRecursive2']


class EventsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    holderId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventsScalarWhereWithAggregatesInputRecursive3']
    OR: List['EventsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EventsScalarWhereWithAggregatesInputRecursive3']


class EventsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    holderId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EventsScalarWhereWithAggregatesInputRecursive4']
    OR: List['EventsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EventsScalarWhereWithAggregatesInputRecursive4']


class EventsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Events arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    holderId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class EventsGroupByOutput(TypedDict, total=False):
    id: _int
    title: _str
    description: _str
    holderId: _int
    createdAt: datetime.datetime
    _sum: 'EventsSumAggregateOutput'
    _avg: 'EventsAvgAggregateOutput'
    _min: 'EventsMinAggregateOutput'
    _max: 'EventsMaxAggregateOutput'
    _count: 'EventsCountAggregateOutput'


class EventsAvgAggregateOutput(TypedDict, total=False):
    """Events output for aggregating averages"""
    id: float
    holderId: float


class EventsSumAggregateOutput(TypedDict, total=False):
    """Events output for aggregating sums"""
    id: _int
    holderId: _int


class EventsScalarAggregateOutput(TypedDict, total=False):
    """Events output including scalar fields"""
    id: _int
    title: _str
    description: _str
    holderId: _int
    createdAt: datetime.datetime


EventsMinAggregateOutput = EventsScalarAggregateOutput
EventsMaxAggregateOutput = EventsScalarAggregateOutput


class EventsMaxAggregateInput(TypedDict, total=False):
    """Events input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    holderId: bool
    createdAt: bool


class EventsMinAggregateInput(TypedDict, total=False):
    """Events input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    holderId: bool
    createdAt: bool


class EventsNumberAggregateInput(TypedDict, total=False):
    """Events input for aggregating numbers"""
    id: bool
    holderId: bool


EventsAvgAggregateInput = EventsNumberAggregateInput
EventsSumAggregateInput = EventsNumberAggregateInput


EventsCountAggregateInput = TypedDict(
    'EventsCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'holderId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

EventsCountAggregateOutput = TypedDict(
    'EventsCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'holderId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


EventsKeys = Literal[
    'id',
    'title',
    'description',
    'holder',
    'holderId',
    'createdAt',
    'schedules',
]
EventsScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'holderId',
    'createdAt',
]
EventsScalarFieldKeysT = TypeVar('EventsScalarFieldKeysT', bound=EventsScalarFieldKeys)

EventsRelationalFieldKeys = Literal[
        'holder',
        'schedules',
    ]

# Schedules types

class SchedulesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Schedules create method"""
    id: _int
    event: 'EventsCreateNestedWithoutRelationsInput'
    eventId: _int
    participants: 'ParticipantsCreateManyNestedWithoutRelationsInput'


class SchedulesCreateInput(SchedulesOptionalCreateInput):
    """Required arguments to the Schedules create method"""
    startAt: datetime.datetime
    endAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SchedulesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Schedules create method, without relations"""
    id: _int
    eventId: _int


class SchedulesCreateWithoutRelationsInput(SchedulesOptionalCreateWithoutRelationsInput):
    """Required arguments to the Schedules create method, without relations"""
    startAt: datetime.datetime
    endAt: datetime.datetime


class SchedulesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SchedulesCreateWithoutRelationsInput'
    connect: 'SchedulesWhereUniqueInput'


class SchedulesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SchedulesCreateWithoutRelationsInput', List['SchedulesCreateWithoutRelationsInput']]
    connect: Union['SchedulesWhereUniqueInput', List['SchedulesWhereUniqueInput']]


_SchedulesWhereUnique_id_Input = TypedDict(
    '_SchedulesWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

SchedulesWhereUniqueInput = _SchedulesWhereUnique_id_Input


class SchedulesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    event: 'EventsUpdateOneWithoutRelationsInput'
    startAt: datetime.datetime
    endAt: datetime.datetime
    participants: 'ParticipantsUpdateManyWithoutRelationsInput'


class SchedulesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    startAt: datetime.datetime
    endAt: datetime.datetime


class SchedulesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SchedulesCreateWithoutRelationsInput']
    connect: List['SchedulesWhereUniqueInput']
    set: List['SchedulesWhereUniqueInput']
    disconnect: List['SchedulesWhereUniqueInput']
    delete: List['SchedulesWhereUniqueInput']

    # TODO
    # update: List['SchedulesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SchedulesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SchedulesScalarWhereInput']
    # upsert: List['SchedulesUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['SchedulesCreateOrConnectWithoutRelationsInput']


class SchedulesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SchedulesCreateWithoutRelationsInput'
    connect: 'SchedulesWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SchedulesUpdateInput'
    # upsert: 'SchedulesUpsertWithoutRelationsInput'
    # connectOrCreate: 'SchedulesCreateOrConnectWithoutRelationsInput'


class SchedulesUpsertInput(TypedDict):
    create: 'SchedulesCreateInput'
    update: 'SchedulesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Schedules_id_OrderByInput = TypedDict(
    '_Schedules_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Schedules_eventId_OrderByInput = TypedDict(
    '_Schedules_eventId_OrderByInput',
    {
        'eventId': 'SortOrder',
    },
    total=True
)

_Schedules_startAt_OrderByInput = TypedDict(
    '_Schedules_startAt_OrderByInput',
    {
        'startAt': 'SortOrder',
    },
    total=True
)

_Schedules_endAt_OrderByInput = TypedDict(
    '_Schedules_endAt_OrderByInput',
    {
        'endAt': 'SortOrder',
    },
    total=True
)

SchedulesOrderByInput = Union[
    '_Schedules_id_OrderByInput',
    '_Schedules_eventId_OrderByInput',
    '_Schedules_startAt_OrderByInput',
    '_Schedules_endAt_OrderByInput',
]



# recursive Schedules types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SchedulesRelationFilter = TypedDict(
    'SchedulesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SchedulesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SchedulesInclude(TypedDict, total=False):
    """Schedules relational arguments"""
    event: Union[bool, 'EventsArgsFromSchedules']
    participants: Union[bool, 'FindManyParticipantsArgsFromSchedules']


    

class UserIncludeFromSchedules(TypedDict, total=False):
    """Relational arguments for Schedules"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromSchedulesRecursive1']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromSchedulesRecursive1']


class UserIncludeFromSchedulesRecursive1(TypedDict, total=False):
    """Relational arguments for Schedules"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromSchedulesRecursive2']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromSchedulesRecursive2']


class UserIncludeFromSchedulesRecursive2(TypedDict, total=False):
    """Relational arguments for Schedules"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromSchedulesRecursive3']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromSchedulesRecursive3']


class UserIncludeFromSchedulesRecursive3(TypedDict, total=False):
    """Relational arguments for Schedules"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromSchedulesRecursive4']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromSchedulesRecursive4']


class UserIncludeFromSchedulesRecursive4(TypedDict, total=False):
    """Relational arguments for Schedules"""

    

class UserArgsFromSchedules(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSchedulesRecursive1(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSchedulesRecursive2(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSchedulesRecursive3(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSchedulesRecursive4(TypedDict, total=False):
    """Arguments for Schedules"""
    
    

class FindManyUserArgsFromSchedules(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSchedulesRecursive1(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSchedulesRecursive2(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSchedulesRecursive3(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSchedulesRecursive4(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class EventsIncludeFromSchedules(TypedDict, total=False):
    """Relational arguments for Schedules"""
    holder: Union[bool, 'UserArgsFromSchedulesRecursive1']
    schedules: Union[bool, 'FindManySchedulesArgsFromSchedulesRecursive1']


class EventsIncludeFromSchedulesRecursive1(TypedDict, total=False):
    """Relational arguments for Schedules"""
    holder: Union[bool, 'UserArgsFromSchedulesRecursive2']
    schedules: Union[bool, 'FindManySchedulesArgsFromSchedulesRecursive2']


class EventsIncludeFromSchedulesRecursive2(TypedDict, total=False):
    """Relational arguments for Schedules"""
    holder: Union[bool, 'UserArgsFromSchedulesRecursive3']
    schedules: Union[bool, 'FindManySchedulesArgsFromSchedulesRecursive3']


class EventsIncludeFromSchedulesRecursive3(TypedDict, total=False):
    """Relational arguments for Schedules"""
    holder: Union[bool, 'UserArgsFromSchedulesRecursive4']
    schedules: Union[bool, 'FindManySchedulesArgsFromSchedulesRecursive4']


class EventsIncludeFromSchedulesRecursive4(TypedDict, total=False):
    """Relational arguments for Schedules"""

    

class EventsArgsFromSchedules(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromSchedulesRecursive1(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromSchedulesRecursive2(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromSchedulesRecursive3(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromSchedulesRecursive4(TypedDict, total=False):
    """Arguments for Schedules"""
    
    

class FindManyEventsArgsFromSchedules(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromSchedulesRecursive1(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromSchedulesRecursive2(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromSchedulesRecursive3(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromSchedulesRecursive4(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class SchedulesIncludeFromSchedules(TypedDict, total=False):
    """Relational arguments for Schedules"""
    event: Union[bool, 'EventsArgsFromSchedulesRecursive1']
    participants: Union[bool, 'FindManyParticipantsArgsFromSchedulesRecursive1']


class SchedulesIncludeFromSchedulesRecursive1(TypedDict, total=False):
    """Relational arguments for Schedules"""
    event: Union[bool, 'EventsArgsFromSchedulesRecursive2']
    participants: Union[bool, 'FindManyParticipantsArgsFromSchedulesRecursive2']


class SchedulesIncludeFromSchedulesRecursive2(TypedDict, total=False):
    """Relational arguments for Schedules"""
    event: Union[bool, 'EventsArgsFromSchedulesRecursive3']
    participants: Union[bool, 'FindManyParticipantsArgsFromSchedulesRecursive3']


class SchedulesIncludeFromSchedulesRecursive3(TypedDict, total=False):
    """Relational arguments for Schedules"""
    event: Union[bool, 'EventsArgsFromSchedulesRecursive4']
    participants: Union[bool, 'FindManyParticipantsArgsFromSchedulesRecursive4']


class SchedulesIncludeFromSchedulesRecursive4(TypedDict, total=False):
    """Relational arguments for Schedules"""

    

class SchedulesArgsFromSchedules(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'SchedulesIncludeFromSchedulesRecursive1'


class SchedulesArgsFromSchedulesRecursive1(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'SchedulesIncludeFromSchedulesRecursive2'


class SchedulesArgsFromSchedulesRecursive2(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'SchedulesIncludeFromSchedulesRecursive3'


class SchedulesArgsFromSchedulesRecursive3(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'SchedulesIncludeFromSchedulesRecursive4'


class SchedulesArgsFromSchedulesRecursive4(TypedDict, total=False):
    """Arguments for Schedules"""
    
    

class FindManySchedulesArgsFromSchedules(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive1'


class FindManySchedulesArgsFromSchedulesRecursive1(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive2'


class FindManySchedulesArgsFromSchedulesRecursive2(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive3'


class FindManySchedulesArgsFromSchedulesRecursive3(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive4'


class FindManySchedulesArgsFromSchedulesRecursive4(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    
    

class ParticipantsIncludeFromSchedules(TypedDict, total=False):
    """Relational arguments for Schedules"""
    user: Union[bool, 'UserArgsFromSchedulesRecursive1']
    schedule: Union[bool, 'SchedulesArgsFromSchedulesRecursive1']


class ParticipantsIncludeFromSchedulesRecursive1(TypedDict, total=False):
    """Relational arguments for Schedules"""
    user: Union[bool, 'UserArgsFromSchedulesRecursive2']
    schedule: Union[bool, 'SchedulesArgsFromSchedulesRecursive2']


class ParticipantsIncludeFromSchedulesRecursive2(TypedDict, total=False):
    """Relational arguments for Schedules"""
    user: Union[bool, 'UserArgsFromSchedulesRecursive3']
    schedule: Union[bool, 'SchedulesArgsFromSchedulesRecursive3']


class ParticipantsIncludeFromSchedulesRecursive3(TypedDict, total=False):
    """Relational arguments for Schedules"""
    user: Union[bool, 'UserArgsFromSchedulesRecursive4']
    schedule: Union[bool, 'SchedulesArgsFromSchedulesRecursive4']


class ParticipantsIncludeFromSchedulesRecursive4(TypedDict, total=False):
    """Relational arguments for Schedules"""

    

class ParticipantsArgsFromSchedules(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'ParticipantsIncludeFromParticipantsRecursive1'


class ParticipantsArgsFromSchedulesRecursive1(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'ParticipantsIncludeFromParticipantsRecursive2'


class ParticipantsArgsFromSchedulesRecursive2(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'ParticipantsIncludeFromParticipantsRecursive3'


class ParticipantsArgsFromSchedulesRecursive3(TypedDict, total=False):
    """Arguments for Schedules"""
    include: 'ParticipantsIncludeFromParticipantsRecursive4'


class ParticipantsArgsFromSchedulesRecursive4(TypedDict, total=False):
    """Arguments for Schedules"""
    
    

class FindManyParticipantsArgsFromSchedules(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive1'


class FindManyParticipantsArgsFromSchedulesRecursive1(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive2'


class FindManyParticipantsArgsFromSchedulesRecursive2(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive3'


class FindManyParticipantsArgsFromSchedulesRecursive3(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive4'


class FindManyParticipantsArgsFromSchedulesRecursive4(TypedDict, total=False):
    """Arguments for Schedules"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    


FindManySchedulesArgs = FindManySchedulesArgsFromSchedules
FindFirstSchedulesArgs = FindManySchedulesArgsFromSchedules


    

class SchedulesWhereInput(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_int, 'types.IntFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeFilter']
    participants: 'ParticipantsListRelationFilter'

    # should be noted that AND and NOT should be Union['SchedulesWhereInputRecursive1', List['SchedulesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SchedulesWhereInputRecursive1']
    OR: List['SchedulesWhereInputRecursive1']
    NOT: List['SchedulesWhereInputRecursive1']


class SchedulesWhereInputRecursive1(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_int, 'types.IntFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeFilter']
    participants: 'ParticipantsListRelationFilter'

    # should be noted that AND and NOT should be Union['SchedulesWhereInputRecursive2', List['SchedulesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SchedulesWhereInputRecursive2']
    OR: List['SchedulesWhereInputRecursive2']
    NOT: List['SchedulesWhereInputRecursive2']


class SchedulesWhereInputRecursive2(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_int, 'types.IntFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeFilter']
    participants: 'ParticipantsListRelationFilter'

    # should be noted that AND and NOT should be Union['SchedulesWhereInputRecursive3', List['SchedulesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SchedulesWhereInputRecursive3']
    OR: List['SchedulesWhereInputRecursive3']
    NOT: List['SchedulesWhereInputRecursive3']


class SchedulesWhereInputRecursive3(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_int, 'types.IntFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeFilter']
    participants: 'ParticipantsListRelationFilter'

    # should be noted that AND and NOT should be Union['SchedulesWhereInputRecursive4', List['SchedulesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SchedulesWhereInputRecursive4']
    OR: List['SchedulesWhereInputRecursive4']
    NOT: List['SchedulesWhereInputRecursive4']


class SchedulesWhereInputRecursive4(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    event: 'EventsRelationFilter'
    eventId: Union[_int, 'types.IntFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeFilter']
    participants: 'ParticipantsListRelationFilter'



# aggregate Schedules types


    

class SchedulesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_int, 'types.IntWithAggregatesFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SchedulesScalarWhereWithAggregatesInputRecursive1']
    OR: List['SchedulesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SchedulesScalarWhereWithAggregatesInputRecursive1']


class SchedulesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_int, 'types.IntWithAggregatesFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SchedulesScalarWhereWithAggregatesInputRecursive2']
    OR: List['SchedulesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SchedulesScalarWhereWithAggregatesInputRecursive2']


class SchedulesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_int, 'types.IntWithAggregatesFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SchedulesScalarWhereWithAggregatesInputRecursive3']
    OR: List['SchedulesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SchedulesScalarWhereWithAggregatesInputRecursive3']


class SchedulesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_int, 'types.IntWithAggregatesFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SchedulesScalarWhereWithAggregatesInputRecursive4']
    OR: List['SchedulesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SchedulesScalarWhereWithAggregatesInputRecursive4']


class SchedulesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Schedules arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    eventId: Union[_int, 'types.IntWithAggregatesFilter']
    startAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SchedulesGroupByOutput(TypedDict, total=False):
    id: _int
    eventId: _int
    startAt: datetime.datetime
    endAt: datetime.datetime
    _sum: 'SchedulesSumAggregateOutput'
    _avg: 'SchedulesAvgAggregateOutput'
    _min: 'SchedulesMinAggregateOutput'
    _max: 'SchedulesMaxAggregateOutput'
    _count: 'SchedulesCountAggregateOutput'


class SchedulesAvgAggregateOutput(TypedDict, total=False):
    """Schedules output for aggregating averages"""
    id: float
    eventId: float


class SchedulesSumAggregateOutput(TypedDict, total=False):
    """Schedules output for aggregating sums"""
    id: _int
    eventId: _int


class SchedulesScalarAggregateOutput(TypedDict, total=False):
    """Schedules output including scalar fields"""
    id: _int
    eventId: _int
    startAt: datetime.datetime
    endAt: datetime.datetime


SchedulesMinAggregateOutput = SchedulesScalarAggregateOutput
SchedulesMaxAggregateOutput = SchedulesScalarAggregateOutput


class SchedulesMaxAggregateInput(TypedDict, total=False):
    """Schedules input for aggregating by max"""
    id: bool
    eventId: bool
    startAt: bool
    endAt: bool


class SchedulesMinAggregateInput(TypedDict, total=False):
    """Schedules input for aggregating by min"""
    id: bool
    eventId: bool
    startAt: bool
    endAt: bool


class SchedulesNumberAggregateInput(TypedDict, total=False):
    """Schedules input for aggregating numbers"""
    id: bool
    eventId: bool


SchedulesAvgAggregateInput = SchedulesNumberAggregateInput
SchedulesSumAggregateInput = SchedulesNumberAggregateInput


SchedulesCountAggregateInput = TypedDict(
    'SchedulesCountAggregateInput',
    {
        'id': bool,
        'eventId': bool,
        'startAt': bool,
        'endAt': bool,
        '_all': bool,
    },
    total=False,
)

SchedulesCountAggregateOutput = TypedDict(
    'SchedulesCountAggregateOutput',
    {
        'id': int,
        'eventId': int,
        'startAt': int,
        'endAt': int,
        '_all': int,
    },
    total=False,
)


SchedulesKeys = Literal[
    'id',
    'event',
    'eventId',
    'startAt',
    'endAt',
    'participants',
]
SchedulesScalarFieldKeys = Literal[
    'id',
    'eventId',
    'startAt',
    'endAt',
]
SchedulesScalarFieldKeysT = TypeVar('SchedulesScalarFieldKeysT', bound=SchedulesScalarFieldKeys)

SchedulesRelationalFieldKeys = Literal[
        'event',
        'participants',
    ]

# Participants types

class ParticipantsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Participants create method"""
    id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _int
    schedule: 'SchedulesCreateNestedWithoutRelationsInput'
    scheduleId: _int


class ParticipantsCreateInput(ParticipantsOptionalCreateInput):
    """Required arguments to the Participants create method"""
    abscence: _bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ParticipantsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Participants create method, without relations"""
    id: _int
    userId: _int
    scheduleId: _int


class ParticipantsCreateWithoutRelationsInput(ParticipantsOptionalCreateWithoutRelationsInput):
    """Required arguments to the Participants create method, without relations"""
    abscence: _bool


class ParticipantsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ParticipantsCreateWithoutRelationsInput'
    connect: 'ParticipantsWhereUniqueInput'


class ParticipantsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ParticipantsCreateWithoutRelationsInput', List['ParticipantsCreateWithoutRelationsInput']]
    connect: Union['ParticipantsWhereUniqueInput', List['ParticipantsWhereUniqueInput']]


_ParticipantsWhereUnique_id_Input = TypedDict(
    '_ParticipantsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

ParticipantsWhereUniqueInput = _ParticipantsWhereUnique_id_Input


class ParticipantsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    user: 'UserUpdateOneWithoutRelationsInput'
    schedule: 'SchedulesUpdateOneWithoutRelationsInput'
    abscence: _bool


class ParticipantsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    abscence: _bool


class ParticipantsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ParticipantsCreateWithoutRelationsInput']
    connect: List['ParticipantsWhereUniqueInput']
    set: List['ParticipantsWhereUniqueInput']
    disconnect: List['ParticipantsWhereUniqueInput']
    delete: List['ParticipantsWhereUniqueInput']

    # TODO
    # update: List['ParticipantsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ParticipantsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ParticipantsScalarWhereInput']
    # upsert: List['ParticipantsUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ParticipantsCreateOrConnectWithoutRelationsInput']


class ParticipantsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ParticipantsCreateWithoutRelationsInput'
    connect: 'ParticipantsWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ParticipantsUpdateInput'
    # upsert: 'ParticipantsUpsertWithoutRelationsInput'
    # connectOrCreate: 'ParticipantsCreateOrConnectWithoutRelationsInput'


class ParticipantsUpsertInput(TypedDict):
    create: 'ParticipantsCreateInput'
    update: 'ParticipantsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Participants_id_OrderByInput = TypedDict(
    '_Participants_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Participants_userId_OrderByInput = TypedDict(
    '_Participants_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Participants_scheduleId_OrderByInput = TypedDict(
    '_Participants_scheduleId_OrderByInput',
    {
        'scheduleId': 'SortOrder',
    },
    total=True
)

_Participants_abscence_OrderByInput = TypedDict(
    '_Participants_abscence_OrderByInput',
    {
        'abscence': 'SortOrder',
    },
    total=True
)

ParticipantsOrderByInput = Union[
    '_Participants_id_OrderByInput',
    '_Participants_userId_OrderByInput',
    '_Participants_scheduleId_OrderByInput',
    '_Participants_abscence_OrderByInput',
]



# recursive Participants types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ParticipantsRelationFilter = TypedDict(
    'ParticipantsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ParticipantsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ParticipantsInclude(TypedDict, total=False):
    """Participants relational arguments"""
    user: Union[bool, 'UserArgsFromParticipants']
    schedule: Union[bool, 'SchedulesArgsFromParticipants']


    

class UserIncludeFromParticipants(TypedDict, total=False):
    """Relational arguments for Participants"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromParticipantsRecursive1']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromParticipantsRecursive1']


class UserIncludeFromParticipantsRecursive1(TypedDict, total=False):
    """Relational arguments for Participants"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromParticipantsRecursive2']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromParticipantsRecursive2']


class UserIncludeFromParticipantsRecursive2(TypedDict, total=False):
    """Relational arguments for Participants"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromParticipantsRecursive3']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromParticipantsRecursive3']


class UserIncludeFromParticipantsRecursive3(TypedDict, total=False):
    """Relational arguments for Participants"""
    holdingEvents: Union[bool, 'FindManyEventsArgsFromParticipantsRecursive4']
    participatingEvents: Union[bool, 'FindManyParticipantsArgsFromParticipantsRecursive4']


class UserIncludeFromParticipantsRecursive4(TypedDict, total=False):
    """Relational arguments for Participants"""

    

class UserArgsFromParticipants(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromParticipantsRecursive1(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromParticipantsRecursive2(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromParticipantsRecursive3(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromParticipantsRecursive4(TypedDict, total=False):
    """Arguments for Participants"""
    
    

class FindManyUserArgsFromParticipants(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromParticipantsRecursive1(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromParticipantsRecursive2(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromParticipantsRecursive3(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromParticipantsRecursive4(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class EventsIncludeFromParticipants(TypedDict, total=False):
    """Relational arguments for Participants"""
    holder: Union[bool, 'UserArgsFromParticipantsRecursive1']
    schedules: Union[bool, 'FindManySchedulesArgsFromParticipantsRecursive1']


class EventsIncludeFromParticipantsRecursive1(TypedDict, total=False):
    """Relational arguments for Participants"""
    holder: Union[bool, 'UserArgsFromParticipantsRecursive2']
    schedules: Union[bool, 'FindManySchedulesArgsFromParticipantsRecursive2']


class EventsIncludeFromParticipantsRecursive2(TypedDict, total=False):
    """Relational arguments for Participants"""
    holder: Union[bool, 'UserArgsFromParticipantsRecursive3']
    schedules: Union[bool, 'FindManySchedulesArgsFromParticipantsRecursive3']


class EventsIncludeFromParticipantsRecursive3(TypedDict, total=False):
    """Relational arguments for Participants"""
    holder: Union[bool, 'UserArgsFromParticipantsRecursive4']
    schedules: Union[bool, 'FindManySchedulesArgsFromParticipantsRecursive4']


class EventsIncludeFromParticipantsRecursive4(TypedDict, total=False):
    """Relational arguments for Participants"""

    

class EventsArgsFromParticipants(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'EventsIncludeFromEventsRecursive1'


class EventsArgsFromParticipantsRecursive1(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'EventsIncludeFromEventsRecursive2'


class EventsArgsFromParticipantsRecursive2(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'EventsIncludeFromEventsRecursive3'


class EventsArgsFromParticipantsRecursive3(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'EventsIncludeFromEventsRecursive4'


class EventsArgsFromParticipantsRecursive4(TypedDict, total=False):
    """Arguments for Participants"""
    
    

class FindManyEventsArgsFromParticipants(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive1'


class FindManyEventsArgsFromParticipantsRecursive1(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive2'


class FindManyEventsArgsFromParticipantsRecursive2(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive3'


class FindManyEventsArgsFromParticipantsRecursive3(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    include: 'EventsIncludeFromEventsRecursive4'


class FindManyEventsArgsFromParticipantsRecursive4(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['EventsOrderByInput', List['EventsOrderByInput']]
    where: 'EventsWhereInput'
    cursor: 'EventsWhereUniqueInput'
    distinct: List['EventsScalarFieldKeys']
    
    

class SchedulesIncludeFromParticipants(TypedDict, total=False):
    """Relational arguments for Participants"""
    event: Union[bool, 'EventsArgsFromParticipantsRecursive1']
    participants: Union[bool, 'FindManyParticipantsArgsFromParticipantsRecursive1']


class SchedulesIncludeFromParticipantsRecursive1(TypedDict, total=False):
    """Relational arguments for Participants"""
    event: Union[bool, 'EventsArgsFromParticipantsRecursive2']
    participants: Union[bool, 'FindManyParticipantsArgsFromParticipantsRecursive2']


class SchedulesIncludeFromParticipantsRecursive2(TypedDict, total=False):
    """Relational arguments for Participants"""
    event: Union[bool, 'EventsArgsFromParticipantsRecursive3']
    participants: Union[bool, 'FindManyParticipantsArgsFromParticipantsRecursive3']


class SchedulesIncludeFromParticipantsRecursive3(TypedDict, total=False):
    """Relational arguments for Participants"""
    event: Union[bool, 'EventsArgsFromParticipantsRecursive4']
    participants: Union[bool, 'FindManyParticipantsArgsFromParticipantsRecursive4']


class SchedulesIncludeFromParticipantsRecursive4(TypedDict, total=False):
    """Relational arguments for Participants"""

    

class SchedulesArgsFromParticipants(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'SchedulesIncludeFromSchedulesRecursive1'


class SchedulesArgsFromParticipantsRecursive1(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'SchedulesIncludeFromSchedulesRecursive2'


class SchedulesArgsFromParticipantsRecursive2(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'SchedulesIncludeFromSchedulesRecursive3'


class SchedulesArgsFromParticipantsRecursive3(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'SchedulesIncludeFromSchedulesRecursive4'


class SchedulesArgsFromParticipantsRecursive4(TypedDict, total=False):
    """Arguments for Participants"""
    
    

class FindManySchedulesArgsFromParticipants(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive1'


class FindManySchedulesArgsFromParticipantsRecursive1(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive2'


class FindManySchedulesArgsFromParticipantsRecursive2(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive3'


class FindManySchedulesArgsFromParticipantsRecursive3(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    include: 'SchedulesIncludeFromSchedulesRecursive4'


class FindManySchedulesArgsFromParticipantsRecursive4(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['SchedulesOrderByInput', List['SchedulesOrderByInput']]
    where: 'SchedulesWhereInput'
    cursor: 'SchedulesWhereUniqueInput'
    distinct: List['SchedulesScalarFieldKeys']
    
    

class ParticipantsIncludeFromParticipants(TypedDict, total=False):
    """Relational arguments for Participants"""
    user: Union[bool, 'UserArgsFromParticipantsRecursive1']
    schedule: Union[bool, 'SchedulesArgsFromParticipantsRecursive1']


class ParticipantsIncludeFromParticipantsRecursive1(TypedDict, total=False):
    """Relational arguments for Participants"""
    user: Union[bool, 'UserArgsFromParticipantsRecursive2']
    schedule: Union[bool, 'SchedulesArgsFromParticipantsRecursive2']


class ParticipantsIncludeFromParticipantsRecursive2(TypedDict, total=False):
    """Relational arguments for Participants"""
    user: Union[bool, 'UserArgsFromParticipantsRecursive3']
    schedule: Union[bool, 'SchedulesArgsFromParticipantsRecursive3']


class ParticipantsIncludeFromParticipantsRecursive3(TypedDict, total=False):
    """Relational arguments for Participants"""
    user: Union[bool, 'UserArgsFromParticipantsRecursive4']
    schedule: Union[bool, 'SchedulesArgsFromParticipantsRecursive4']


class ParticipantsIncludeFromParticipantsRecursive4(TypedDict, total=False):
    """Relational arguments for Participants"""

    

class ParticipantsArgsFromParticipants(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'ParticipantsIncludeFromParticipantsRecursive1'


class ParticipantsArgsFromParticipantsRecursive1(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'ParticipantsIncludeFromParticipantsRecursive2'


class ParticipantsArgsFromParticipantsRecursive2(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'ParticipantsIncludeFromParticipantsRecursive3'


class ParticipantsArgsFromParticipantsRecursive3(TypedDict, total=False):
    """Arguments for Participants"""
    include: 'ParticipantsIncludeFromParticipantsRecursive4'


class ParticipantsArgsFromParticipantsRecursive4(TypedDict, total=False):
    """Arguments for Participants"""
    
    

class FindManyParticipantsArgsFromParticipants(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive1'


class FindManyParticipantsArgsFromParticipantsRecursive1(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive2'


class FindManyParticipantsArgsFromParticipantsRecursive2(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive3'


class FindManyParticipantsArgsFromParticipantsRecursive3(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    include: 'ParticipantsIncludeFromParticipantsRecursive4'


class FindManyParticipantsArgsFromParticipantsRecursive4(TypedDict, total=False):
    """Arguments for Participants"""
    take: int
    skip: int
    order_by: Union['ParticipantsOrderByInput', List['ParticipantsOrderByInput']]
    where: 'ParticipantsWhereInput'
    cursor: 'ParticipantsWhereUniqueInput'
    distinct: List['ParticipantsScalarFieldKeys']
    


FindManyParticipantsArgs = FindManyParticipantsArgsFromParticipants
FindFirstParticipantsArgs = FindManyParticipantsArgsFromParticipants


    

class ParticipantsWhereInput(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    schedule: 'SchedulesRelationFilter'
    scheduleId: Union[_int, 'types.IntFilter']
    abscence: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['ParticipantsWhereInputRecursive1', List['ParticipantsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ParticipantsWhereInputRecursive1']
    OR: List['ParticipantsWhereInputRecursive1']
    NOT: List['ParticipantsWhereInputRecursive1']


class ParticipantsWhereInputRecursive1(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    schedule: 'SchedulesRelationFilter'
    scheduleId: Union[_int, 'types.IntFilter']
    abscence: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['ParticipantsWhereInputRecursive2', List['ParticipantsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ParticipantsWhereInputRecursive2']
    OR: List['ParticipantsWhereInputRecursive2']
    NOT: List['ParticipantsWhereInputRecursive2']


class ParticipantsWhereInputRecursive2(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    schedule: 'SchedulesRelationFilter'
    scheduleId: Union[_int, 'types.IntFilter']
    abscence: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['ParticipantsWhereInputRecursive3', List['ParticipantsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ParticipantsWhereInputRecursive3']
    OR: List['ParticipantsWhereInputRecursive3']
    NOT: List['ParticipantsWhereInputRecursive3']


class ParticipantsWhereInputRecursive3(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    schedule: 'SchedulesRelationFilter'
    scheduleId: Union[_int, 'types.IntFilter']
    abscence: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['ParticipantsWhereInputRecursive4', List['ParticipantsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ParticipantsWhereInputRecursive4']
    OR: List['ParticipantsWhereInputRecursive4']
    NOT: List['ParticipantsWhereInputRecursive4']


class ParticipantsWhereInputRecursive4(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    schedule: 'SchedulesRelationFilter'
    scheduleId: Union[_int, 'types.IntFilter']
    abscence: Union[_bool, 'types.BooleanFilter']



# aggregate Participants types


    

class ParticipantsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    scheduleId: Union[_int, 'types.IntWithAggregatesFilter']
    abscence: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['ParticipantsScalarWhereWithAggregatesInputRecursive1']
    OR: List['ParticipantsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ParticipantsScalarWhereWithAggregatesInputRecursive1']


class ParticipantsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    scheduleId: Union[_int, 'types.IntWithAggregatesFilter']
    abscence: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['ParticipantsScalarWhereWithAggregatesInputRecursive2']
    OR: List['ParticipantsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ParticipantsScalarWhereWithAggregatesInputRecursive2']


class ParticipantsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    scheduleId: Union[_int, 'types.IntWithAggregatesFilter']
    abscence: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['ParticipantsScalarWhereWithAggregatesInputRecursive3']
    OR: List['ParticipantsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ParticipantsScalarWhereWithAggregatesInputRecursive3']


class ParticipantsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    scheduleId: Union[_int, 'types.IntWithAggregatesFilter']
    abscence: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['ParticipantsScalarWhereWithAggregatesInputRecursive4']
    OR: List['ParticipantsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ParticipantsScalarWhereWithAggregatesInputRecursive4']


class ParticipantsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Participants arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    scheduleId: Union[_int, 'types.IntWithAggregatesFilter']
    abscence: Union[_bool, 'types.BooleanWithAggregatesFilter']



class ParticipantsGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    scheduleId: _int
    abscence: _bool
    _sum: 'ParticipantsSumAggregateOutput'
    _avg: 'ParticipantsAvgAggregateOutput'
    _min: 'ParticipantsMinAggregateOutput'
    _max: 'ParticipantsMaxAggregateOutput'
    _count: 'ParticipantsCountAggregateOutput'


class ParticipantsAvgAggregateOutput(TypedDict, total=False):
    """Participants output for aggregating averages"""
    id: float
    userId: float
    scheduleId: float


class ParticipantsSumAggregateOutput(TypedDict, total=False):
    """Participants output for aggregating sums"""
    id: _int
    userId: _int
    scheduleId: _int


class ParticipantsScalarAggregateOutput(TypedDict, total=False):
    """Participants output including scalar fields"""
    id: _int
    userId: _int
    scheduleId: _int
    abscence: _bool


ParticipantsMinAggregateOutput = ParticipantsScalarAggregateOutput
ParticipantsMaxAggregateOutput = ParticipantsScalarAggregateOutput


class ParticipantsMaxAggregateInput(TypedDict, total=False):
    """Participants input for aggregating by max"""
    id: bool
    userId: bool
    scheduleId: bool
    abscence: bool


class ParticipantsMinAggregateInput(TypedDict, total=False):
    """Participants input for aggregating by min"""
    id: bool
    userId: bool
    scheduleId: bool
    abscence: bool


class ParticipantsNumberAggregateInput(TypedDict, total=False):
    """Participants input for aggregating numbers"""
    id: bool
    userId: bool
    scheduleId: bool


ParticipantsAvgAggregateInput = ParticipantsNumberAggregateInput
ParticipantsSumAggregateInput = ParticipantsNumberAggregateInput


ParticipantsCountAggregateInput = TypedDict(
    'ParticipantsCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'scheduleId': bool,
        'abscence': bool,
        '_all': bool,
    },
    total=False,
)

ParticipantsCountAggregateOutput = TypedDict(
    'ParticipantsCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'scheduleId': int,
        'abscence': int,
        '_all': int,
    },
    total=False,
)


ParticipantsKeys = Literal[
    'id',
    'user',
    'userId',
    'schedule',
    'scheduleId',
    'abscence',
]
ParticipantsScalarFieldKeys = Literal[
    'id',
    'userId',
    'scheduleId',
    'abscence',
]
ParticipantsScalarFieldKeysT = TypeVar('ParticipantsScalarFieldKeysT', bound=ParticipantsScalarFieldKeys)

ParticipantsRelationalFieldKeys = Literal[
        'user',
        'schedule',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields